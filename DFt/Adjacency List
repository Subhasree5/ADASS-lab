import java.util.*;

public class DFTAdjList {
    // Depth-First Traversal (DFT) using Recursion
    static void DFT(Map<Character, List<Character>> graph, char startNode) {
        Set<Character> visited = new HashSet<>(); // Track visited nodes

        System.out.println("Depth-First Traversal starting from node " + startNode + ":");
        DFS(graph, startNode, visited);
        System.out.println();
    }

    // Recursive DFS function
    static void DFS(Map<Character, List<Character>> graph, char node, Set<Character> visited) {
        visited.add(node); // Mark node as visited
        System.out.print(node + " "); // Print node

        // Explore all neighbors
        for (char neighbor : graph.getOrDefault(node, new ArrayList<>())) {
            if (!visited.contains(neighbor)) {
                DFS(graph, neighbor, visited); // Recursively visit
            }
        }
    }

    // Main function
    public static void main(String[] args) {
        // Define the graph using an adjacency list
        Map<Character, List<Character>> graph = new HashMap<>();
        graph.put('a', Arrays.asList('b', 'c'));
        graph.put('b', Arrays.asList('a', 'c', 'd'));
        graph.put('c', Arrays.asList('a', 'b', 'e'));
        graph.put('d', Arrays.asList('b', 'e', 'f'));
        graph.put('e', Arrays.asList('c', 'd', 'f'));
        graph.put('f', Arrays.asList('d', 'e'));

        char startNode = 'a'; // Start DFS from node 'a'
        DFT(graph, startNode);
    }
}

//output
Depth-First Traversal starting from node a:
a b c e d f 
