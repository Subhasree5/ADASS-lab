class Node{
	int key;
	Node left,right;
	public Node(int item){
		key=item;
		left=right=null;
	}	
}	
class binarySearchTree{
	Node root;
	binarySearchTree(){
		root=null;
	}
	void insert(int key){
		root=insertRec(root,key);
	}
	Node insertRec(Node root,int key){
		if(root==null){
			root=new Node(key);
			return root;
		}else if(key<root.key){
			root.left=insertRec(root.left,key);
		}else if(key>root.key){
			root.right=insertRec(root.right,key);
		}
		return root;
	}
	boolean search(int key){
		return searchRec(root,key)!=null;
	}
	Node searchRec(Node root,int key){
		if(root==null||root.key==key){
			return root;
		}
		if(key<root.key){
			return searchRec(root.left,key);
		}
		return searchRec(root.right,key);
	}
	void inorder(){
		inorderRec(root);
	}
	void inorderRec(Node root){
		if(root!=null){
			inorderRec(root.left);
			System.out.print(root.key+" ");
			inorderRec(root.right);
		}
	}
	void preorder(){
		preorderRec(root);
	}
	void preorderRec(Node root){
		if(root!=null){
			System.out.print(root.key+" ");
			preorderRec(root.left);
			preorderRec(root.right);
		}
	}
	void postorder(){
		postorderRec(root);
	}
	void postorderRec(Node root){
		if(root!=null){
			postorderRec(root.left);
			postorderRec(root.right);
			System.out.print(root.key+" ");
		}
	}
	public static void main(String[]args){
		binarySearchTree tree=new binarySearchTree();
		tree.insert(50);
		tree.insert(30);
		tree.insert(20);
		tree.insert(40);
		tree.insert(70);
		tree.insert(60);
		tree.insert(80);
		System.out.println("Inorder travesal: ");
		tree.inorder();
		System.out.println();
		System.out.println("Preorder travesal: ");
		tree.preorder();
		System.out.println();
		System.out.println("Postorder travesal: ");
		tree.postorder();
		System.out.println();
		int keyToSearch=40;
		System.out.println("Search for "+keyToSearch+" : "+(tree.search(keyToSearch)?"Found":"Not Found"));
	}


//output
Inorder travesal: 
20 30 40 50 60 70 80 
Preorder travesal: 
50 30 20 40 70 60 80 
Postorder travesal: 
20 40 30 60 80 70 50 
Search for 40 : Found
