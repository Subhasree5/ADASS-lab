class Queue{
    private int []elements;
    private int front;
    private int rear;
    private int size;
    private int capacity;
    public Queue(int capacity){
        this.capacity=capacity;
        elements= new int[capacity];
        front=0;
        rear=-1;
        size=0;
    }
    public void enqueue(int element){
        if(isFull()){
            System.out.println("Queue is full.Cannot add the element= "+element);
            return;
        }
        rear=(rear+1)%capacity;
        elements[rear]=element;
        size++;
        System.out.println("Added element= "+element);
    }
    public int dequeue(){
        if(isEmpty()){
            System.out.println("Queue is empty.Cannot delete an element");
            return -1;
        }
        int dequeuedElement=elements[front];
        elements[front]=0;
        front=(front+1)%capacity;
        size--;
        System.out.println("Dequeued element= "+dequeuedElement);
        return dequeuedElement; 
    }
    public int peek(){
        if(isEmpty()){
            System.out.println("Queue is empty.Cannot peek an element");
            return -1;
        }
        return elements[front];
    }
    public boolean isFull(){
        return size==capacity;
    }
    public boolean isEmpty(){
        return size==0;
    }
    public void display(){
        if(isEmpty()){
            System.out.println("Queue is empty");
            return;
        }
        System.out.print("Queue: ");
        for(int i=0;i<capacity;i++){
            System.out.print(elements[(front+i)%capacity]+" ");
        }
        System.out.println();
    }
}
public class Main{
    public static void main (String []args){
        Queue q=new Queue(5);
        q.enqueue(5);
        q.enqueue(10);
        q.display();
        q.dequeue();
        q.display();
        q.dequeue();
        q.dequeue();
        q.enqueue(15);
        q.enqueue(20);
        System.out.println("Peeked element= "+q.peek());
        q.enqueue(25);
        q.enqueue(30);
        q.enqueue(35);
        q.display();
        q.enqueue(40);
    }
}

//output 
Added element= 5
Added element= 10
Queue: 5 10 0 0 0 
Dequeued element= 5
Queue: 10 0 0 0 0 
Dequeued element= 10
Queue is empty.Cannot delete an element
Added element= 15
Added element= 20
Peeked element= 15
Added element= 25
Added element= 30
Added element= 35
Queue: 15 20 25 30 35 
Queue is full.Cannot add the element=40
