import java.util.*;

public class NQueens {
    static boolean isSafe(int board[][], int row, int col, int n) {
        // Check column
        for (int i = 0; i < row; i++) {
            if (board[i][col] == 1) return false;
        }

        // Check left diagonal
        for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 1) return false;
        }

        // Check right diagonal
        for (int i = row, j = col; i >= 0 && j < n; i--, j++) {
            if (board[i][j] == 1) return false;
        }

        return true;
    }

    static boolean solveNQueens(int board[][], int row, int n, List<Integer> result) {
        if (row == n) return true;  // All queens placed successfully

        for (int col = 0; col < n; col++) {
            if (isSafe(board, row, col, n)) {
                board[row][col] = 1;
                result.add(col + 1);  // Store queen's column (1-based index)

                if (solveNQueens(board, row + 1, n, result)) return true;

                // Backtrack
                board[row][col] = 0;
                result.remove(result.size() - 1);
            }
        }
        return false;
    }

    static List<Integer> nQueen(int n) {
        int[][] board = new int[n][n];
        List<Integer> result = new ArrayList<>();

        if (solveNQueens(board, 0, n, result)) return result;
        else return Collections.singletonList(-1);  // No solution
    }

    public static void main(String[] args) {
        int n = 4;
        List<Integer> solution = nQueen(n);

        System.out.println("Queen positions (column-wise): " + solution);
    }
}

//output
Queen positions (column-wise): [2, 4, 1, 3]
